#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Pre-Hand-In
\begin_inset Newline newline
\end_inset

42137 Optimization using Metaheuristics
\end_layout

\begin_layout Author
Jaspur Højgaard - s072069
\begin_inset Newline newline
\end_inset

Rasmus Bo Sørensen - s072080
\begin_inset Newline newline
\end_inset

Mark Ruvald Pedersen - s072095
\end_layout

\begin_layout Section
Problem outline
\end_layout

\begin_layout Standard
In this project we want to implement a Meta Heuristic for scheduling communicati
on in a Real time Multi-Processor System-on-Chip (MPSoC), the MPSoCs we
 will be targeting for this project are MPSoCs with a Network-on-Chip (NoC)
 as interconnect.
 This general purpose Real time MPSoC is part of the T-Crest project
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.t-crest.org/
\end_layout

\end_inset

 supported by the European union.
\end_layout

\begin_layout Standard
In Real time systems performance depends purely on the Worst-Case Execution
 Time (WCET), therefore the analyzability of the system is very important
 to get a good performance.
 A NoC is built of tiles consisting of a processor, a router and links to
 neighboring tiles.
 A sample sketch of a Tile can be seen in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tile-concept"

\end_inset

.
 In a Real time MPSoC each tile processor executes one task to keep the
 timing analysis simple and get a lower WCET.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Tile-Details.pdf
	lyxscale 30
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tile-concept"

\end_inset

The Tile contains a processor, a Network Interface(NI), A local instruction
 and data cache, and possibly some I/O.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create an analyzable NoC interconnect it is required to decouple communicatio
n in separate channels.
 A communication channel is a point-to-point connection from one Tile to
 another, this point-to-point connection can route packets on different
 paths.
 A path is a series of links, on which the packet travels to reach the end
 point of the connection.
 Two communication channels can not affect each other.
 To decouple communication channels, the traffic in the network can be scheduled
 statically at compile time.
 Generating this routing schedule is a hard problem to solve.
 The schedule is periodic, and thus for performance reasons (Bandwidth and
 latency) it is important to have a schedule as short as possible.
 We want to optimize for shortest schedule, for a given use-case.
\end_layout

\begin_layout Standard
The routers can be connected in many different topologies, the most common
 structure is in a grid like fashion.
 One possible NoC topology is a double-torus, a figure of this layout can
 be seen in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Double-torus_nice"

\end_inset

.
 In this figure some of the links are very long, and when implemented in
 hardware this becomes infeasible.
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Double-torus_not-nice"

\end_inset

 is an example of how the double torus can be layout, with a minimum average
 link length.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/simple-double-torus.pdf
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Double-torus_nice"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/double-torus.pdf
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Double-torus_not-nice"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Double-torus.
 
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:Double-torus_nice"

\end_inset

 Nice graph representation.
 
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:Double-torus_not-nice"

\end_inset

 Layout representation of the double-torus to minimize longest links distance.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Metaheuristics
\end_layout

\begin_layout Standard
Our scheduling problem is large and combinatorial in nature with dependencies
 and constraints.
 A natural constraint is that any directed link can only transfer a single
 packet at any instant.
 Another is that packets always arrives in the same order as they were sent.
 To avoid excessive feasibility-checking of the schedule due this in-order
 requirement of packets, we make the simplifying decision that all routes
 should be a shortest route.
 Due to the Manhattan-like layout of tiles, this shortest path routing is
 simple.
 Always taking the shortest route will automatically guarantee causality
 of received packets.
 
\end_layout

\begin_layout Subsection
Neighborhood and operators
\end_layout

\begin_layout Standard
Imagining a compact schedule where most links are already occupied, small
 changes like swapping individual links will in most cases lead to infeasible
 schedules.
 Instead we consider removing entire routes and rebuilding them.
 It is also possible to reroute part of an existing route.
\end_layout

\begin_layout Subsection
Metaheuristic propositions
\end_layout

\begin_layout Standard
We expect the following two metaheuristics to yield the best results:
\end_layout

\begin_layout Itemize
Large Neighborhood Search (LNS): Destroy and rebuild part of solution with
 greedy algorithm.
\end_layout

\begin_layout Itemize
Greedy Randomized Adaptive Search Procedure: Generates greedy initial 
\end_layout

\begin_layout Itemize
We expect GRASP to perform well, in 
\end_layout

\begin_layout Standard
lack of direction
\end_layout

\begin_layout Standard
Finally, we can implement Simulated Annealing -- since it is simple and
 can provide a frame of reference.
\end_layout

\end_body
\end_document
